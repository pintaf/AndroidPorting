diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/AndroidManifest.xml /media/hdd/lineage_16/packages/apps/Settings/AndroidManifest.xml
--- /media/ssd/patches/packages/apps/Settings/AndroidManifest.xml	2020-03-12 01:50:58.616926645 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/AndroidManifest.xml	2019-05-03 04:37:35.000000000 +0300
@@ -209,6 +209,30 @@
                 android:value="true" />
         </activity>
 
+
+        <activity android:name=".Settings$DesktopDashboardActivity"
+            android:taskAffinity="com.android.settings"
+            android:label="@string/desktop_dashboard_title"
+            android:icon="@drawable/ic_desktop_display"
+            android:parentActivityName="Settings">
+            <intent-filter android:priority="1">
+                <action android:name="android.settings.DESKTOP_SETTINGS" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+            <intent-filter android:priority="10">
+                <action android:name="com.android.settings.action.SETTINGS"/>
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.desktop.DesktopDashboardFragment"/>
+            <meta-data android:name="com.android.settings.category"
+                android:value="com.android.settings.category.ia.homepage"/>
+            <meta-data android:name="com.android.settings.summary"
+                android:resource="@string/desktop_dashboard_summary"/>
+            <meta-data android:name="com.android.settings.PRIMARY_PROFILE_CONTROLLED"
+                android:value="true" />
+        </activity>
+
+        
         <activity android:name="AirplaneModeVoiceActivity"
                 android:label="@string/wireless_networks_settings_title"
                 android:theme="@*android:style/Theme.DeviceDefault.Light.Voice"
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/res/drawable/ic_desktop_display.xml /media/hdd/lineage_16/packages/apps/Settings/res/drawable/ic_desktop_display.xml
--- /media/ssd/patches/packages/apps/Settings/res/drawable/ic_desktop_display.xml	1970-01-01 02:00:00.000000000 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/res/drawable/ic_desktop_display.xml	2019-05-03 04:37:57.000000000 +0300
@@ -0,0 +1,15 @@
+<!--
+    Derived from Material Design icon "desktop windows"
+    http://www.google.com/design/icons/#ic_desktop_windows
+-->
+
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="48dp"
+    android:height="48dp"
+    android:viewportWidth="24.0"
+    android:viewportHeight="24.0"
+    android:tint="?android:attr/colorControlNormal">
+    <path
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M21,2H3c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h7v2H8v2h8v-2h-2v-2h7c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zm0,14H3V4h18v12z"/>
+</vector> 
\ No newline at end of file
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/res/values/strings.xml /media/hdd/lineage_16/packages/apps/Settings/res/values/strings.xml
--- /media/ssd/patches/packages/apps/Settings/res/values/strings.xml	2020-03-12 01:50:58.944928767 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/res/values/strings.xml	2019-05-03 05:43:06.000000000 +0300
@@ -9957,6 +9957,28 @@
     <!-- Note displayed when certain features are not available on low ram devices. [CHAR LIMIT=NONE] -->
     <string name="disabled_low_ram_device">This feature is not available on this device</string>
 
+    <!-- Maru Desktop settings -->
+    <!-- Title for setting tile leading to Desktop settings [CHAR LIMIT=40]-->
+    <string name="desktop_dashboard_title">Desktop</string>
+    <!-- Summary for Desktop settings [CHAR LIMIT=NONE]-->
+    <string name="desktop_dashboard_summary">Manage your desktop</string>
+    <string name="help_url_desktop_dashboard" translatable="false"></string>
+    <string name="desktop_main_settings_title">Dashboard</string>
+    <string name="desktop_status_starting">Uni-Os Desktop is starting...</string>
+    <string name="desktop_status_stopping">Uni-Os Desktop is shutting down...</string>
+    <string name="desktop_status_running">Uni-Os Desktop running.</string>
+    <string name="desktop_status_running_bg">Uni-Os Desktop running in background.</string>
+    <string name="desktop_status_stopped">Uni-Os Desktop off.</string>
+    <string name="desktop_status_start_failure">Uni-Os Desktop failed to start.</string>
+    <string name="desktop_status_stop_failure">Uni-Os Desktop failed to stop.</string>
+    <string name="desktop_status_crash">Uni-Os Desktop unexpectedly stopped.</string>
+    <string name="desktop_status_hint_interact">Connect to an external display to interact with your desktop.</string>
+    <string name="desktop_status_hint_autostart">Connect to an HDMI display to auto-start your desktop.</string>
+    <string name="desktop_shutdown_dialog_title">Shutdown desktop?</string>
+    <string name="desktop_shutdown_dialog_details">Your desktop apps will be closed immediately so make sure you save any unfinished work.</string>
+    <string name="desktop_shutdown_dialog_negative_action">Cancel</string>
+    <string name="desktop_shutdown_dialog_positive_action">Shutdown</string>
+
     <!-- UI debug setting: preference title - enforce full raw GNSS satellite measurements [CHAR LIMIT=60] -->
     <string name="enable_gnss_raw_meas_full_tracking">Force full GNSS measurements</string>
     <!-- UI debug setting: preference summary - describes the behavior of forcing full raw GNSS satellite measurements [CHAR LIMIT=NONE] -->
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/res/xml/desktop_dashboard.xml /media/hdd/lineage_16/packages/apps/Settings/res/xml/desktop_dashboard.xml
--- /media/ssd/patches/packages/apps/Settings/res/xml/desktop_dashboard.xml	1970-01-01 02:00:00.000000000 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/res/xml/desktop_dashboard.xml	2019-05-03 04:41:24.000000000 +0300
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018 The Maru OS Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:title="@string/desktop_dashboard_title">
+
+    <!-- "Fake" preference we use to emulate a TextView for displaying desktop status info -->
+    <Preference
+        android:key="desktop_status" />
+
+</PreferenceScreen> 
\ No newline at end of file
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/core/gateway/SettingsGateway.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/core/gateway/SettingsGateway.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/core/gateway/SettingsGateway.java	2020-03-12 01:50:58.980929001 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/core/gateway/SettingsGateway.java	2019-05-03 04:44:31.000000000 +0300
@@ -62,6 +62,7 @@
 import com.android.settings.datausage.DataUsageSummaryLegacy;
 import com.android.settings.deletionhelper.AutomaticStorageManagerSettings;
 import com.android.settings.development.DevelopmentSettingsDashboardFragment;
+import com.android.settings.desktop.DesktopDashboardFragment;
 import com.android.settings.deviceinfo.DeviceInfoSettings;
 import com.android.settings.deviceinfo.PrivateVolumeForget;
 import com.android.settings.deviceinfo.PrivateVolumeSettings;
@@ -260,6 +261,7 @@
             LockscreenDashboardFragment.class.getName(),
             BluetoothDeviceDetailsFragment.class.getName(),
             DataUsageList.class.getName(),
+            DesktopDashboardFragment.class.getName(),
             DirectoryAccessDetails.class.getName(),
             ToggleBackupSettingFragment.class.getName(),
             PreviouslyConnectedDeviceDashboardFragment.class.getName(),
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/dashboard/DashboardFragmentRegistry.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/dashboard/DashboardFragmentRegistry.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/dashboard/DashboardFragmentRegistry.java	2020-03-12 01:50:58.980929001 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/dashboard/DashboardFragmentRegistry.java	2019-05-03 04:46:24.000000000 +0300
@@ -24,6 +24,7 @@
 import com.android.settings.applications.AppAndNotificationDashboardFragment;
 import com.android.settings.applications.DefaultAppSettings;
 import com.android.settings.connecteddevice.AdvancedConnectedDeviceDashboardFragment;
+import com.android.settings.desktop.DesktopDashboardFragment;
 import com.android.settings.connecteddevice.ConnectedDeviceDashboardFragment;
 import com.android.settings.development.DevelopmentSettingsDashboardFragment;
 import com.android.settings.deviceinfo.StorageDashboardFragment;
@@ -102,6 +103,9 @@
         PARENT_TO_CATEGORY_KEY_MAP.put(NightDisplaySettings.class.getName(),
             CategoryKey.CATEGORY_NIGHT_DISPLAY);
 
+        PARENT_TO_CATEGORY_KEY_MAP.put(DesktopDashboardFragment.class.getName(),
+                CategoryKey.CATEGORY_MARU_DESKTOP);
+
         CATEGORY_KEY_TO_PARENT_MAP = new ArrayMap<>(PARENT_TO_CATEGORY_KEY_MAP.size());
 
         for (Map.Entry<String, String> parentToKey : PARENT_TO_CATEGORY_KEY_MAP.entrySet()) {
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/DesktopDashboardFragment.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/DesktopDashboardFragment.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/DesktopDashboardFragment.java	1970-01-01 02:00:00.000000000 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/DesktopDashboardFragment.java	2019-05-03 05:38:20.000000000 +0300
@@ -0,0 +1,333 @@
+/*
+ * Copyright (C) 2015-2016 Preetam J. D'Souza
+ * Copyright (C) 2016 The Maru OS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package com.android.settings.desktop;
+
+import android.app.DialogFragment;
+import android.content.Context;
+import android.hardware.display.DisplayManager;
+import android.mperspective.Perspective;
+import android.mperspective.PerspectiveManager;
+import android.os.Bundle;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceCategory;
+import android.util.Log;
+import android.view.View;
+import android.widget.Switch;
+import android.widget.TextView;
+
+import com.android.internal.logging.nano.MetricsProto;
+import com.android.settings.R;
+import com.android.settings.SettingsActivity;
+import com.android.settings.dashboard.DashboardFragment;
+import com.android.settings.widget.SwitchBar;
+import com.android.settings.widget.ToggleSwitch;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+import java.util.List;
+
+public class DesktopDashboardFragment extends DashboardFragment
+        implements SwitchBar.OnSwitchChangeListener,
+        ToggleSwitch.OnBeforeCheckedChangeListener,
+        ShutdownDialogFragment.ShutdownDialogListener {
+
+    private static final String TAG = DesktopDashboardFragment.class.getName();
+
+    private static final String KEY_DESKTOP_STATUS = "desktop_status";
+
+    private PerspectiveManager mPerspectiveManager;
+    private DesktopPerspectiveListener mDesktopListener;
+    private boolean mDesktopListening = false;
+
+    private int mDesktopState;
+
+    private DisplayManager mDisplayManager;
+    private MaruDisplayListener mMaruDisplayListener;
+    private boolean mDisplayListening = false;
+    private boolean mMaruDisplayConnected = false;
+
+    private SwitchBar mSwitchBar;
+    private boolean mSwitchBarListening = false;
+
+    private Preference mDesktopStatusSummary;
+
+    private static final String SHUTDOWN_DIALOG_TAG = ShutdownDialogFragment.class.getName();
+    private boolean mShutdownConfirmed = false;
+    private boolean mOverrideShutdownDialog = false;
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        final SettingsActivity settingsActivity = (SettingsActivity) getActivity();
+        final Context context = settingsActivity.getApplicationContext();
+        mPerspectiveManager = (PerspectiveManager) context
+                .getSystemService(Context.PERSPECTIVE_SERVICE);
+        mDisplayManager = (DisplayManager) context
+                .getSystemService(Context.DISPLAY_SERVICE);
+
+        mDesktopListener = new DesktopPerspectiveListener();
+
+        mMaruDisplayListener = new MaruDisplayListener(context, mDisplayManager);
+        mMaruDisplayListener.setDisplayCallback(new MaruDisplayListener.MaruDisplayCallback() {
+            @Override
+            public void onDisplayAdded() {
+                Log.d(TAG, "onDisplayAdded");
+                mMaruDisplayConnected = mMaruDisplayListener.isMaruDisplayConnected();
+                updateView();
+            }
+
+            @Override
+            public void onDisplayRemoved() {
+                Log.d(TAG, "onDisplayRemoved");
+                mMaruDisplayConnected = mMaruDisplayListener.isMaruDisplayConnected();
+                updateView();
+            }
+        });
+
+        mSwitchBar = settingsActivity.getSwitchBar();
+        mSwitchBar.show();
+    }
+
+    @Override
+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+        super.onCreatePreferences(savedInstanceState, rootKey);
+        mDesktopStatusSummary = getPreferenceScreen().findPreference(KEY_DESKTOP_STATUS);
+        mDesktopStatusSummary.setIcon(com.android.settingslib.R.drawable.ic_info_outline_24dp);
+        mDesktopStatusSummary.setSelectable(false);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        if (!mSwitchBarListening) {
+            mSwitchBar.addOnSwitchChangeListener(this);
+            mSwitchBar.getSwitch().setOnBeforeCheckedChangeListener(this);
+            mSwitchBarListening = true;
+        }
+        if (!mDisplayListening) {
+            // registered on calling thread's looper
+            mDisplayManager.registerDisplayListener(mMaruDisplayListener, null);
+            mDisplayListening = true;
+        }
+        if (!mDesktopListening) {
+            // registered on calling thread's looper
+            mPerspectiveManager.registerPerspectiveListener(mDesktopListener, null);
+            mDesktopListening = true;
+        }
+
+        initializeState();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+
+        if (mSwitchBarListening) {
+            mSwitchBar.removeOnSwitchChangeListener(this);
+            mSwitchBar.getSwitch().setOnBeforeCheckedChangeListener(null);
+            mSwitchBarListening = false;
+        }
+        if (mDisplayListening) {
+            mDisplayManager.unregisterDisplayListener(mMaruDisplayListener);
+            mDisplayListening = false;
+        }
+        if (mDesktopListening) {
+            mPerspectiveManager.unregisterPerspectiveListener();
+            mDesktopListening = false;
+        }
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        mSwitchBar.hide();
+    }
+
+    @Override
+    public boolean onBeforeCheckedChanged(ToggleSwitch toggleSwitch, boolean checked) {
+        if (!mOverrideShutdownDialog) {
+            boolean attemptedShutdown = toggleSwitch.isChecked() && !checked
+                    && mDesktopState == Perspective.STATE_RUNNING;
+            if (attemptedShutdown) {
+                if (!mShutdownConfirmed) {
+                    ShutdownDialogFragment mShutdownDialogFragment = new ShutdownDialogFragment();
+                    mShutdownDialogFragment.listener = this;
+                    mShutdownDialogFragment.show(getFragmentManager(), SHUTDOWN_DIALOG_TAG);
+                    /*
+                     * Ignore the change until the user confirms the dialog.
+                     * The dialog action callbacks will set the state.
+                     */
+                    return true;
+                } else {
+                    // reset the confirmation for next time
+                    mShutdownConfirmed = false;
+                }
+            }
+        }
+
+        // OK the change
+        return false;
+    }
+
+    @Override
+    public void onShutdownCancel(DialogFragment dialog) { /* no-op */ }
+
+    @Override
+    public void onShutdown(DialogFragment dialog) {
+        // the user has confirmed shutdown so update the SwitchBar
+        mShutdownConfirmed = true;
+        mSwitchBar.setChecked(false);
+    }
+
+    @Override
+    public void onSwitchChanged(Switch switchView, boolean isChecked) {
+        if (isChecked) {
+            if (mDesktopState == Perspective.STATE_STOPPED) {
+                // prematurely update our state so the user has immediate feedback
+                updateDesktopStateIfNeeded(Perspective.STATE_STARTING);
+
+                mPerspectiveManager.startDesktopPerspective();
+            }
+        } else {
+            if (mDesktopState == Perspective.STATE_RUNNING) {
+                // prematurely update our state so the user has immediate feedback
+                updateDesktopStateIfNeeded(Perspective.STATE_STOPPING);
+
+                mPerspectiveManager.stopDesktopPerspective();
+            }
+        }
+    }
+
+    private void initializeState() {
+        /*
+         * Sync up any state that can change without accessing this fragment
+         * since it's possible that we missed some events while in the background.
+         */
+
+        mDesktopState = mPerspectiveManager.isDesktopRunning() ?
+                Perspective.STATE_RUNNING : Perspective.STATE_STOPPED;
+
+        mMaruDisplayListener.sync();
+        mMaruDisplayConnected = mMaruDisplayListener.isMaruDisplayConnected();
+
+        updateView();
+    }
+
+    private void updateDesktopStateIfNeeded(int state) {
+        if (mDesktopState != state) {
+            int prevState = mDesktopState;
+            mDesktopState = state;
+            updateView(prevState);
+        }
+    }
+
+    private void updateView() {
+        updateView(mDesktopState);
+    }
+
+    private void updateView(final int prevDesktopState) {
+        // common defaults to simplify state configuration
+        int hintVisibility = View.INVISIBLE;
+
+        switch (mDesktopState) {
+            case Perspective.STATE_STARTING:
+                mSwitchBar.setChecked(true);
+                mSwitchBar.setEnabled(false);
+                mDesktopStatusSummary.setTitle(R.string.desktop_status_starting);
+                break;
+            case Perspective.STATE_STOPPING:
+                mSwitchBar.setChecked(false);
+                mSwitchBar.setEnabled(false);
+                mDesktopStatusSummary.setTitle(R.string.desktop_status_stopping);
+                break;
+            case Perspective.STATE_STOPPED:
+                mSwitchBar.setChecked(false);
+                mSwitchBar.setEnabled(true);
+                if (prevDesktopState == Perspective.STATE_STOPPING || prevDesktopState == mDesktopState) {
+                    mDesktopStatusSummary.setTitle(R.string.desktop_status_stopped);
+                    if (!mMaruDisplayConnected) {
+                        mDesktopStatusSummary.setSummary(R.string.desktop_status_hint_autostart);
+                        hintVisibility = View.VISIBLE;
+                    }
+                } else if (prevDesktopState == Perspective.STATE_STARTING) {
+                    mDesktopStatusSummary.setTitle(R.string.desktop_status_start_failure);
+                } else if (prevDesktopState == Perspective.STATE_RUNNING) {
+                    mDesktopStatusSummary.setTitle(R.string.desktop_status_crash);
+                }
+                break;
+            case Perspective.STATE_RUNNING:
+                mSwitchBar.setChecked(true);
+                mSwitchBar.setEnabled(true);
+                if (prevDesktopState == Perspective.STATE_STARTING || prevDesktopState == mDesktopState) {
+                    if (mMaruDisplayConnected) {
+                        mDesktopStatusSummary.setTitle(R.string.desktop_status_running);
+                    } else {
+                        mDesktopStatusSummary.setTitle(R.string.desktop_status_running_bg);
+                        mDesktopStatusSummary.setSummary(R.string.desktop_status_hint_interact);
+                        hintVisibility = View.VISIBLE;
+                    }
+                } else if (prevDesktopState == Perspective.STATE_STOPPING) {
+                    mDesktopStatusSummary.setTitle(R.string.desktop_status_stop_failure);
+                }
+                break;
+        }
+
+        if (hintVisibility != View.VISIBLE) {
+            mDesktopStatusSummary.setSummary(null);
+        }
+    }
+
+    private final class DesktopPerspectiveListener
+            implements PerspectiveManager.PerspectiveListener {
+        @Override
+        public void onPerspectiveStateChanged(int state) {
+            Log.d(TAG, "onPerspectiveStateChanged: " + Perspective.stateToString(state));
+            /*
+             * Kind of ugly but due to the way the dialog is triggered
+             * we need to override it in the unlikely case that the state
+             * changes from STARTING to STOPPED (error) or RUNNING to STOPPED (crash).
+             */
+            mOverrideShutdownDialog = true;
+            updateDesktopStateIfNeeded(state);
+            mOverrideShutdownDialog = false;
+        }
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsProto.MetricsEvent.SETTINGS_DESKTOP_CATEGORY;
+    }
+
+    @Override
+    public String getLogTag() {
+        return TAG;
+    }
+
+    @Override
+    public int getHelpResource() {
+        return R.string.help_url_desktop_dashboard;
+    }
+
+    @Override
+    public int getPreferenceScreenResId() {
+        return R.xml.desktop_dashboard;
+    }
+
+ 
+}
\ No newline at end of file
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/MaruDisplayListener.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/MaruDisplayListener.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/MaruDisplayListener.java	1970-01-01 02:00:00.000000000 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/MaruDisplayListener.java	2019-05-03 04:48:29.000000000 +0300
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2015-2016 Preetam J. D'Souza
+ * Copyright (C) 2016 The Maru OS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.desktop;
+
+import android.content.Context;
+import android.hardware.display.DisplayManager;
+import android.view.Display;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Utility class for keeping track of displays relevant to Maru.
+ *
+ * Right now, this keeps track of all displays that are eligible for mirroring,
+ * i.e. all public presentation displays.
+ */
+public class MaruDisplayListener implements DisplayManager.DisplayListener {
+    private static final String TAG = MaruDisplayListener.class.getName();
+    private final Context mContext;
+    private final DisplayManager mDisplayManager;
+    private Set<Integer> mMirrorableDisplays;
+
+    public interface MaruDisplayCallback {
+        void onDisplayAdded();
+        void onDisplayRemoved();
+    }
+    private MaruDisplayCallback mCallback;
+
+    public MaruDisplayListener(Context context, DisplayManager displayManager) {
+        mContext = context;
+        mDisplayManager = displayManager;
+        mMirrorableDisplays = new HashSet<Integer>();
+    }
+
+    @Override
+    public void onDisplayAdded(int displayId) {
+        Display display = mDisplayManager.getDisplay(displayId);
+
+        if (display.isPublicPresentation() && mMirrorableDisplays.add(displayId)) {
+            if (mCallback != null) {
+                mCallback.onDisplayAdded();
+            }
+        }
+    }
+
+    @Override
+    public void onDisplayRemoved(int displayId) {
+        if (mMirrorableDisplays.remove(displayId)) {
+            if (mCallback != null) {
+                mCallback.onDisplayRemoved();
+            }
+        }
+    }
+
+    @Override
+    public void onDisplayChanged(int displayId) { /* no-op */ }
+
+    public void sync() {
+        mMirrorableDisplays.clear();
+        Display[] displays = mDisplayManager
+                .getDisplays(DisplayManager.DISPLAY_CATEGORY_PRESENTATION);
+        for (Display display : displays) {
+            if (display.isPublicPresentation()) {
+                mMirrorableDisplays.add(display.getDisplayId());
+            }
+        }
+    }
+
+    public boolean isMaruDisplayConnected() {
+        return !mMirrorableDisplays.isEmpty();
+    }
+
+    public void setDisplayCallback(MaruDisplayCallback callback) {
+        mCallback = callback;
+    }
+
+    public void removeDisplayCallback() {
+        mCallback = null;
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/ShutdownDialogFragment.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/ShutdownDialogFragment.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/desktop/ShutdownDialogFragment.java	1970-01-01 02:00:00.000000000 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/desktop/ShutdownDialogFragment.java	2019-05-03 04:50:41.000000000 +0300
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2015-2016 Preetam J. D'Souza
+ * Copyright (C) 2016 The Maru OS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.desktop;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.android.settings.R;
+
+/**
+ * A shutdown confirmation dialog to explicitly ensure that the
+ * user wants to shutdown the desktop perspective.
+ */
+public class ShutdownDialogFragment extends DialogFragment {
+    private static final String TAG = ShutdownDialogFragment.class.getName();
+
+    public interface ShutdownDialogListener {
+        void onShutdownCancel(DialogFragment dialog);
+        void onShutdown(DialogFragment dialog);
+    }
+
+    ShutdownDialogListener listener;
+
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        builder.setTitle(R.string.desktop_shutdown_dialog_title)
+                .setMessage(R.string.desktop_shutdown_dialog_details)
+                .setNegativeButton(R.string.desktop_shutdown_dialog_negative_action,
+                        new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                listener.onShutdownCancel(ShutdownDialogFragment.this);
+                            }
+                        }
+                )
+                .setPositiveButton(R.string.desktop_shutdown_dialog_positive_action,
+                        new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                listener.onShutdown(ShutdownDialogFragment.this);
+                            }
+                        }
+                );
+        return builder.create();
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=.git' /media/ssd/patches/packages/apps/Settings/src/com/android/settings/Settings.java /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/Settings.java
--- /media/ssd/patches/packages/apps/Settings/src/com/android/settings/Settings.java	2020-03-12 01:50:58.956928845 +0200
+++ /media/hdd/lineage_16/packages/apps/Settings/src/com/android/settings/Settings.java	2019-05-03 04:42:10.000000000 +0300
@@ -175,5 +175,6 @@
     public static class StorageDashboardActivity extends SettingsActivity {}
     public static class AccountDashboardActivity extends SettingsActivity {}
     public static class SystemDashboardActivity extends SettingsActivity {}
+    public static class DesktopDashboardActivity extends SettingsActivity {}
 
 }
